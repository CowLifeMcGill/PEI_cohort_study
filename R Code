# Loading packages ----------------------------------------------------------------
extrafont::loadfonts(device = "win")

require(readstata13)
require(readxl)
require(tidyverse)
require(tidylog)
require(lubridate)
require(DataExplorer)

require(cowplot)

# Helping functions -------------------------------------------------------
day.to.yearORmonth <- function(x, unit = c("year", "month")){
  
  if(unit == "year") {
    
    x1 <- as.numeric(x)/365.25
  }
  
  if(unit == "month") {
    
    x1 <- (as.numeric(x)/365.25)*12
  }
  
  return(x1)
}


a.holstein <- matrix(c(36.5146, 27.3524, -0.1203),
                     nrow= 3, ncol = 1)

g.inv.holstein <- matrix(c(125.43,	-26.503,	0.8333,
                           -26.503,	24.5961, -0.8049,
                           0.8333,	-0.8049,	0.03847),
                         nrow= 3, ncol = 3, byrow = TRUE) %>% 
  solve()

cue.2012.HOLSTEIN <- function(age, weight, age.pred, a.holstein, g.inv.holstein) {
  
  y <- matrix(weight, ncol = 1)
  
  x <- matrix(c(rep(1, length(age)),
                age, age^2),
              nrow = length(age), ncol = 3, byrow = FALSE)
  
  x.t <- t(x)
  
  POM <- 1.2455
  Res <- 0.2636
  
  mm <- (x %*% a.holstein)^POM
  
  r <- solve(diag(c(mm*Res)))
  
  if(length(mm) == 1) {
    r <- mm
  }
  
  out1 <- solve(((x.t %*% r) %*% x) + g.inv.holstein)
  
  out2 <- ((x.t %*% r) %*% y) + (g.inv.holstein %*% a.holstein)
  
  res <- out1 %*% out2
  
  wgt <- res[1,] + res[2,]*age.pred + res[3,] * age.pred^2
  
  return(wgt)
}


getSeason <- function(DATES) {
  WS <- as.Date("2012-12-15", format = "%Y-%m-%d") # Winter Solstice
  SE <- as.Date("2012-3-15",  format = "%Y-%m-%d") # Spring Equinox
  SS <- as.Date("2012-6-15",  format = "%Y-%m-%d") # Summer Solstice
  FE <- as.Date("2012-9-15",  format = "%Y-%m-%d") # Fall Equinox
  
  # Convert dates from any year to 2012 dates
  d <- as.Date(strftime(DATES, format="2012-%m-%d"))
  
  factor(ifelse (d >= WS | d < SE, "Winter",
                 ifelse (d >= SE & d < SS, "Spring",
                         ifelse (d >= SS & d < FE, "Summer", "Fall"))),
         levels = c("Winter", "Spring", "Summer", "Fall"))
}


 
rmse <- function (pred, obs, na.rm = FALSE) {
  sqrt(mean((pred - obs)^2, na.rm = na.rm))
}

var.sig <- function(model, var.test, var.target, data, runs, seed) {
  
  set.seed(seed = seed)
  seed.runs <- sample.int(n = 10000000, size = runs)
  
  error.vector <- c(NULL)
  original.error <- rmse(pred = predict(model, data),
                         obs = var.target)
  
  for(i in 1:runs) {
    
    set.seed(seed = seed.runs[i])
    d.temp <- data %>%
      select(all_of(var.test)) %>% 
      slice_sample(n = nrow(data), replace = FALSE) %>% 
      cbind(data %>% 
              select(-any_of(var.test)))
    
    permutated.error <- rmse(pred = predict(model, d.temp),
                             obs = var.target)
    
    error.vector[i] <- ((permutated.error - original.error)/original.error)*100
    
    svMisc::progress(i, runs)
    
  }
  
  return(error.vector)
  
}


ALEPlot1 <- function (X, X.model, pred.fun, J, K = 40, NA.plot = TRUE) 
{
  N = dim(X)[1]
  d = dim(X)[2]
  if (length(J) == 1) {
    if (class(X[, J]) == "factor") {
      X <- X %>% drop_na(any_of(J))
      X[, J] <- droplevels(X[, J])
      x.count <- as.numeric(table(X[, J]))
      x.prob <- x.count/sum(x.count)
      K <- nlevels(X[, J])
      D.cum <- matrix(0, K, K)
      D <- matrix(0, K, K)
      for (j in setdiff(1:d, J)) {
        if (class(X[, j]) == "factor") {
          A = table(X[, J], X[, j])
          A = A/x.count
          for (i in 1:(K - 1)) {
            for (k in (i + 1):K) {
              D[i, k] = sum(abs(A[i, ] - A[k, ]))/2
              D[k, i] = D[i, k]
            }
          }
          D.cum <- D.cum + D
        }
        else {
          q.x.all <- quantile(X[, j], probs = seq(0, 
                                                  1, length.out = 100), na.rm = TRUE, names = FALSE)
          x.ecdf = tapply(X[, j], X[, J], ecdf)
          for (i in 1:(K - 1)) {
            for (k in (i + 1):K) {
              D[i, k] = max(abs(x.ecdf[[i]](q.x.all) - 
                                  x.ecdf[[k]](q.x.all)), na.rm = TRUE)
              D[k, i] = D[i, k]
            }
          }
          D.cum <- D.cum + D
        }
      }
      D1D <- cmdscale(D.cum, k = 1)
      ind.ord <- sort(D1D, index.return = T)$ix
      ord.ind <- sort(ind.ord, index.return = T)$ix
      levs.orig <- levels(X[, J])
      levs.ord <- levs.orig[ind.ord]
      x.ord <- ord.ind[as.numeric(X[, J])]
      row.ind.plus <- (1:N)[x.ord < K]
      row.ind.neg <- (1:N)[x.ord > 1]
      X.plus <- X
      X.neg <- X
      X.plus[row.ind.plus, J] <- levs.ord[x.ord[row.ind.plus] + 
                                            1]
      X.neg[row.ind.neg, J] <- levs.ord[x.ord[row.ind.neg] - 
                                          1]
      y.hat <- pred.fun(X.model = X.model, newdata = X)
      y.hat.plus <- pred.fun(X.model = X.model, newdata = X.plus[row.ind.plus, 
      ])
      y.hat.neg <- pred.fun(X.model = X.model, newdata = X.neg[row.ind.neg, 
      ])
      Delta.plus <- y.hat.plus - y.hat[row.ind.plus]
      Delta.neg <- y.hat[row.ind.neg] - y.hat.neg
      Delta <- as.numeric(tapply(c(Delta.plus, Delta.neg), 
                                 c(x.ord[row.ind.plus], x.ord[row.ind.neg] - 1), 
                                 mean))
      fJ <- c(0, cumsum(Delta))
      fJ = fJ - sum(fJ * x.prob[ind.ord])
      x <- levs.ord
      barplot(fJ, names = x, xlab = paste("x_", J, " (",
                                          names(X)[J], ")", sep = ""), ylab = paste("f_",
                                                                                    J, "(x_", J, ")", sep = ""), las = 3)
    }
    else if (class(X[, J]) == "numeric" | class(X[, J]) == 
             "integer") {
      z = c(min(X[, J], na.rm = TRUE), as.numeric(quantile(X[, J], seq(1/K, 
                                                                       1, length.out = K), type = 1, na.rm = TRUE)))
      z = unique(z)
      K = length(z) - 1
      fJ = numeric(K)
      a1 = as.numeric(cut(X[, J], breaks = z, include.lowest = TRUE))
      X1 = X
      X2 = X
      X1[, J] = z[a1]
      X2[, J] = z[a1 + 1]
      y.hat1 = pred.fun(X.model = X.model, newdata = X1)
      y.hat2 = pred.fun(X.model = X.model, newdata = X2)
      Delta = y.hat2 - y.hat1
      Delta = as.numeric(tapply(Delta, a1, mean))
      fJ = c(0, cumsum(Delta))
      b1 <- as.numeric(table(a1))
      fJ = fJ - sum((fJ[1:K] + fJ[2:(K + 1)])/2 * b1)/sum(b1)
      x <- z
      plot(x, fJ, type = "l", xlab = paste("x_", J, " (",
                                           names(X)[J], ")", sep = ""), ylab = paste("f_",
                                                                                     J, "(x_", J, ")", sep = ""))
    }
    else print("error:  class(X[,J]) must be either factor or numeric or integer")
  }
  else if (length(J) == 2) {
    if (class(X[, J[2]]) != "numeric" & class(X[, J[2]]) != 
        "integer") {
      print("error: X[,J[2]] must be numeric or integer. Only X[,J[1]] can be a factor")
    }
    if (class(X[, J[1]]) == "factor") {
      X[, J[1]] <- droplevels(X[, J[1]])
      x.count <- as.numeric(table(X[, J[1]]))
      x.prob <- x.count/sum(x.count)
      K1 <- nlevels(X[, J[1]])
      D.cum <- matrix(0, K1, K1)
      D <- matrix(0, K1, K1)
      for (j in setdiff(1:d, J[1])) {
        if (class(X[, j]) == "factor") {
          A = table(X[, J[1]], X[, j])
          A = A/x.count
          for (i in 1:(K1 - 1)) {
            for (k in (i + 1):K1) {
              D[i, k] = sum(abs(A[i, ] - A[k, ]))/2
              D[k, i] = D[i, k]
            }
          }
          D.cum <- D.cum + D
        }
        else {
          q.x.all <- quantile(X[, j], probs = seq(0, 
                                                  1, length.out = 100), na.rm = TRUE, names = FALSE)
          x.ecdf = tapply(X[, j], X[, J[1]], ecdf)
          for (i in 1:(K1 - 1)) {
            for (k in (i + 1):K1) {
              D[i, k] = max(abs(x.ecdf[[i]](q.x.all) - 
                                  x.ecdf[[k]](q.x.all)), na.rm = TRUE)
              D[k, i] = D[i, k]
            }
          }
          D.cum <- D.cum + D
        }
      }
      D1D <- cmdscale(D.cum, k = 1)
      ind.ord <- sort(D1D, index.return = T)$ix
      ord.ind <- sort(ind.ord, index.return = T)$ix
      levs.orig <- levels(X[, J[1]])
      levs.ord <- levs.orig[ind.ord]
      x.ord <- ord.ind[as.numeric(X[, J[1]])]
      z2 = c(min(X[, J[2]], na.rm = TRUE), as.numeric(quantile(X[, J[2]], 
                                                               seq(1/K, 1, length.out = K), type = 1, na.rm = TRUE)))
      z2 = unique(z2)
      K2 = length(z2) - 1
      a2 = as.numeric(cut(X[, J[2]], breaks = z2, include.lowest = TRUE))
      row.ind.plus <- (1:N)[x.ord < K1]
      X11 = X
      X12 = X
      X21 = X
      X22 = X
      X11[row.ind.plus, J[2]] = z2[a2][row.ind.plus]
      X12[row.ind.plus, J[2]] = z2[a2 + 1][row.ind.plus]
      X21[row.ind.plus, J[1]] = levs.ord[x.ord[row.ind.plus] + 
                                           1]
      X22[row.ind.plus, J[1]] = levs.ord[x.ord[row.ind.plus] + 
                                           1]
      X21[row.ind.plus, J[2]] = z2[a2][row.ind.plus]
      X22[row.ind.plus, J[2]] = z2[a2 + 1][row.ind.plus]
      y.hat11 = pred.fun(X.model = X.model, newdata = X11[row.ind.plus, 
      ])
      y.hat12 = pred.fun(X.model = X.model, newdata = X12[row.ind.plus, 
      ])
      y.hat21 = pred.fun(X.model = X.model, newdata = X21[row.ind.plus, 
      ])
      y.hat22 = pred.fun(X.model = X.model, newdata = X22[row.ind.plus, 
      ])
      Delta.plus = (y.hat22 - y.hat21) - (y.hat12 - y.hat11)
      row.ind.neg <- (1:N)[x.ord > 1]
      X11 = X
      X12 = X
      X21 = X
      X22 = X
      X11[row.ind.neg, J[1]] = levs.ord[x.ord[row.ind.neg] - 
                                          1]
      X12[row.ind.neg, J[1]] = levs.ord[x.ord[row.ind.neg] - 
                                          1]
      X11[row.ind.neg, J[2]] = z2[a2][row.ind.neg]
      X12[row.ind.neg, J[2]] = z2[a2 + 1][row.ind.neg]
      X21[row.ind.neg, J[2]] = z2[a2][row.ind.neg]
      X22[row.ind.neg, J[2]] = z2[a2 + 1][row.ind.neg]
      y.hat11 = pred.fun(X.model = X.model, newdata = X11[row.ind.neg, 
      ])
      y.hat12 = pred.fun(X.model = X.model, newdata = X12[row.ind.neg, 
      ])
      y.hat21 = pred.fun(X.model = X.model, newdata = X21[row.ind.neg, 
      ])
      y.hat22 = pred.fun(X.model = X.model, newdata = X22[row.ind.neg, 
      ])
      Delta.neg = (y.hat22 - y.hat21) - (y.hat12 - y.hat11)
      Delta = as.matrix(tapply(c(Delta.plus, Delta.neg), 
                               list(c(x.ord[row.ind.plus], x.ord[row.ind.neg] - 
                                        1), a2[c(row.ind.plus, row.ind.neg)]), mean))
      NA.Delta = is.na(Delta)
      NA.ind = which(NA.Delta, arr.ind = T, useNames = F)
      if (nrow(NA.ind) > 0) {
        notNA.ind = which(!NA.Delta, arr.ind = T, useNames = F)
        range1 = K1 - 1
        range2 = max(z2, na.rm = TRUE) - min(z2, na.rm = TRUE)
        Z.NA = cbind(NA.ind[, 1]/range1, (z2[NA.ind[, 
                                                    2]] + z2[NA.ind[, 2] + 1])/2/range2)
        Z.notNA = cbind(notNA.ind[, 1]/range1, (z2[notNA.ind[, 
                                                             2]] + z2[notNA.ind[, 2] + 1])/2/range2)
        nbrs <- ann(Z.notNA, Z.NA, k = 1, verbose = F)$knnIndexDist[, 
                                                                    1]
        Delta[NA.ind] = Delta[matrix(notNA.ind[nbrs, 
        ], ncol = 2)]
      }
      fJ = matrix(0, K1 - 1, K2)
      fJ = apply(t(apply(Delta, 1, cumsum)), 2, cumsum)
      fJ = rbind(rep(0, K2), fJ)
      fJ = cbind(rep(0, K1), fJ)
      b = as.matrix(table(x.ord, a2))
      b2 = apply(b, 2, sum)
      Delta = fJ[, 2:(K2 + 1)] - fJ[, 1:K2]
      b.Delta = b * Delta
      Delta.Ave = apply(b.Delta, 2, sum)/b2
      fJ2 = c(0, cumsum(Delta.Ave))
      b.ave = matrix((b[1:(K1 - 1), ] + b[2:K1, ])/2, K1 - 
                       1, K2)
      b1 = apply(b.ave, 1, sum)
      Delta = matrix(fJ[2:K1, ] - fJ[1:(K1 - 1), ], K1 - 
                       1, K2 + 1)
      b.Delta = matrix(b.ave * (Delta[, 1:K2] + Delta[, 
                                                      2:(K2 + 1)])/2, K1 - 1, K2)
      Delta.Ave = apply(b.Delta, 1, sum)/b1
      fJ1 = c(0, cumsum(Delta.Ave))
      fJ = fJ - outer(fJ1, rep(1, K2 + 1)) - outer(rep(1, 
                                                       K1), fJ2)
      fJ0 = sum(b * (fJ[, 1:K2] + fJ[, 2:(K2 + 1)])/2)/sum(b)
      fJ = fJ - fJ0
      x <- list(levs.ord, z2)
      K <- c(K1, K2)
      image(1:K1, x[[2]], fJ, xlab = paste("x_", J[1], 
                                           " (", names(X)[J[1]], ")", sep = ""), ylab = paste("x_", 
                                                                                              J[2], " (", names(X)[J[2]], ")", sep = ""), ylim = range(z2), 
            yaxs = "i")
      contour(1:K1, x[[2]], fJ, add = TRUE, drawlabels = TRUE)
      axis(side = 1, labels = x[[1]], at = 1:K1, las = 3, 
           padj = 1.2)
      if (NA.plot == FALSE) {
        if (nrow(NA.ind) > 0) {
          NA.ind = which(b == 0, arr.ind = T, useNames = F)
          rect(xleft = NA.ind[, 1] - 0.5, ybottom = z2[NA.ind[, 
                                                              2]], xright = NA.ind[, 1] + 0.5, ytop = z2[NA.ind[, 
                                                                                                                2] + 1], col = "black")
        }
      }
    }
    else if (class(X[, J[1]]) == "numeric" | class(X[, J[1]]) == 
             "integer") {
      z1 = c(min(X[, J[1]], na.rm = TRUE), as.numeric(quantile(X[, J[1]], 
                                                               seq(1/K, 1, length.out = K), type = 1, na.rm = TRUE)))
      z1 = unique(z1)
      K1 = length(z1) - 1
      a1 = as.numeric(cut(X[, J[1]], breaks = z1, include.lowest = TRUE))
      z2 = c(min(X[, J[2]], na.rm = TRUE), as.numeric(quantile(X[, J[2]], 
                                                               seq(1/K, 1, length.out = K), type = 1, na.rm = TRUE)))
      z2 = unique(z2)
      K2 = length(z2) - 1
      fJ = matrix(0, K1, K2)
      a2 = as.numeric(cut(X[, J[2]], breaks = z2, include.lowest = TRUE))
      X11 = X
      X12 = X
      X21 = X
      X22 = X
      X11[, J] = cbind(z1[a1], z2[a2])
      X12[, J] = cbind(z1[a1], z2[a2 + 1])
      X21[, J] = cbind(z1[a1 + 1], z2[a2])
      X22[, J] = cbind(z1[a1 + 1], z2[a2 + 1])
      y.hat11 = pred.fun(X.model = X.model, newdata = X11)
      y.hat12 = pred.fun(X.model = X.model, newdata = X12)
      y.hat21 = pred.fun(X.model = X.model, newdata = X21)
      y.hat22 = pred.fun(X.model = X.model, newdata = X22)
      Delta = (y.hat22 - y.hat21) - (y.hat12 - y.hat11)
      Delta = as.matrix(tapply(Delta, list(a1, a2), mean))
      NA.Delta = is.na(Delta)
      NA.ind = which(NA.Delta, arr.ind = T, useNames = F)
      if (nrow(NA.ind) > 0) {
        notNA.ind = which(!NA.Delta, arr.ind = T, useNames = F)
        range1 = max(z1, na.rm = TRUE) - min(z1, na.rm = TRUE)
        range2 = max(z2, na.rm = TRUE) - min(z2, na.rm = TRUE)
        Z.NA = cbind((z1[NA.ind[, 1]] + z1[NA.ind[, 1] + 
                                             1])/2/range1, (z2[NA.ind[, 2]] + z2[NA.ind[, 
                                                                                        2] + 1])/2/range2)
        Z.notNA = cbind((z1[notNA.ind[, 1]] + z1[notNA.ind[, 
                                                           1] + 1])/2/range1, (z2[notNA.ind[, 2]] + z2[notNA.ind[, 
                                                                                                                 2] + 1])/2/range2)
        nbrs <- ann(Z.notNA, Z.NA, k = 1, verbose = F)$knnIndexDist[, 
                                                                    1]
        Delta[NA.ind] = Delta[matrix(notNA.ind[nbrs, 
        ], ncol = 2)]
      }
      fJ = apply(t(apply(Delta, 1, cumsum)), 2, cumsum)
      fJ = rbind(rep(0, K2), fJ)
      fJ = cbind(rep(0, K1 + 1), fJ)
      b = as.matrix(table(a1, a2))
      b1 = apply(b, 1, sum)
      b2 = apply(b, 2, sum)
      Delta = fJ[2:(K1 + 1), ] - fJ[1:K1, ]
      b.Delta = b * (Delta[, 1:K2] + Delta[, 2:(K2 + 1)])/2
      Delta.Ave = apply(b.Delta, 1, sum)/b1
      fJ1 = c(0, cumsum(Delta.Ave))
      Delta = fJ[, 2:(K2 + 1)] - fJ[, 1:K2]
      b.Delta = b * (Delta[1:K1, ] + Delta[2:(K1 + 1), 
      ])/2
      Delta.Ave = apply(b.Delta, 2, sum)/b2
      fJ2 = c(0, cumsum(Delta.Ave))
      fJ = fJ - outer(fJ1, rep(1, K2 + 1)) - outer(rep(1, 
                                                       K1 + 1), fJ2)
      fJ0 = sum(b * (fJ[1:K1, 1:K2] + fJ[1:K1, 2:(K2 + 
                                                    1)] + fJ[2:(K1 + 1), 1:K2] + fJ[2:(K1 + 1), 2:(K2 + 
                                                                                                     1)])/4)/sum(b)
      fJ = fJ - fJ0
      x <- list(z1, z2)
      K <- c(K1, K2)
      image(x[[1]], x[[2]], fJ, xlab = paste("x_", J[1], 
                                             " (", names(X)[J[1]], ")", sep = ""), ylab = paste("x_", 
                                                                                                J[2], " (", names(X)[J[2]], ")", sep = ""), xlim = range(z1), 
            ylim = range(z2), xaxs = "i", yaxs = "i")
      contour(x[[1]], x[[2]], fJ, add = TRUE, drawlabels = TRUE)
      if (NA.plot == FALSE) {
        if (nrow(NA.ind) > 0) {
          rect(xleft = z1[NA.ind[, 1]], ybottom = z2[NA.ind[, 
                                                            2]], xright = z1[NA.ind[, 1] + 1], ytop = z2[NA.ind[, 
                                                                                                                2] + 1], col = "black")
        }
      }
    }
    else print("error:  class(X[,J[1]]) must be either factor or numeric/integer")
  }
  else print("error:  J must be a vector of length one or two")
  list(K = K, x.values = x, f.values = fJ)
}



# Data --------------------------------------------------------------------
d.upei <- read.dta13("PEI/2021_02_10_NB_data_Jan_2020.dta")
d.v2k <- read_excel("2021_08_28_NB-Cumul-Revenue-V2.xlsx") %>% 
  rename_all(tolower)

lhr_codes <- read_excel("Left_Herd_Reasons.xlsx")


d.v2k <- d.v2k %>% 
  left_join(lhr_codes %>% 
              select(lhr_cd, left_herd_reason) %>% 
              mutate_if(is.character, as.factor),
            by = "lhr_cd")

# During merging, only in "x" file is due to NAs 




# Exploration and cleaning -------------------------------------------
## Production and peformance ####

summary(d.v2k)
str(d.v2k)


# Converting data to the right format
d.v2k1 <- d.v2k %>% 
  mutate_if(is.character, as.factor) %>% # some were numeric, manually doing that
  mutate_at(c("anm_id", "hrd_id", "mismatch_birth", "lact_no"), as.factor) %>% 
  mutate_at(c("enter_herd_date", "left_herd_date", "nb_birthdate", "birth_date",
              "lact_start_date", "lact_end_date"), as.Date, format = "%Y-%m-%d")

# Data extraction happened on August 27th, 2021
# Adding that info to the data file

d.v2k2 <- d.v2k1 %>% 
  mutate(extract_date = as.Date("2021-08-27", format = "%Y-%m-%d"))


# Exploratory graphs
DataExplorer::plot_missing(d.v2k2)

DataExplorer::plot_bar(d.v2k2)

DataExplorer::plot_histogram(d.v2k2)

DataExplorer::plot_correlation(d.v2k2, type = "continuous", 
                               cor_args = c(use = "pairwise.complete.obs"))

DataExplorer::plot_correlation(d.v2k2, type = "discrete", 
                               cor_args = c(use = "pairwise.complete.obs"))


d.v2k3 <- d.v2k2 %>% 
  mutate(fixed_birth_date = if_else(anm_id == "9998791", birth_date,
                                    
                                    # Down the road, I figured out there is duplicated
                                    # record from anm_id = 10034876 in which there are
                                    # two different birth_dates from UPEI but only
                                    # one from Lactanet. Keeping the Lactanet
                                    if_else(anm_id == "10034876", birth_date,
                                            if_else(is.na(nb_birthdate) == FALSE, 
                                                    nb_birthdate, birth_date)))) %>% 
  select(-birth_date, -nb_birthdate, -mismatch_birth) %>% 
  rename("birth_date" = "fixed_birth_date")


# Checking if animals moved between herds

d.v2k3 %>%
  mutate(diff_birth_date = as.numeric(enter_herd_date - birth_date)) %>% 
  pull(diff_birth_date) %>% 
  summary()


keep.but.wrong_enter_date <- d.v2k3 %>% 
  mutate(diff_birth_date = as.numeric(enter_herd_date - birth_date),
         index = paste(anm_id, lact_no, sep = "_")) %>% 
  filter(diff_birth_date > 100 & is.na(tot_lact_date_yld_milk) == FALSE) %>% 
  select(-enter_herd_date, -left_herd_date)



keep.fixed_enter_date <- keep.but.wrong_enter_date %>% 
  left_join(d.v2k3 %>% 
              mutate(index = paste(anm_id, lact_no, sep = "_")) %>% 
              filter(index %in% keep.but.wrong_enter_date$index) %>% 
              filter(is.na(tot_lact_date_yld_milk) == TRUE) %>% 
              select(index, enter_herd_date, left_herd_date),
            by = "index") %>%
  
  # changing the columns corder to match original file
  select(names(d.v2k3))


anm.lct.to.remove <- keep.fixed_enter_date %>% 
  mutate(index = paste(anm_id, lact_no, sep = "_")) %>% 
  pull(index)


d.v2k4 <- d.v2k3 %>% 
  mutate(diff_birth_date = as.numeric(enter_herd_date - birth_date),
         index = paste(anm_id, lact_no, sep = "_")) %>% 
  
  # 1st filtering) Removing Animal/lactation with wrong enter date and no problem 
  # with production data
  filter(diff_birth_date < 1000) %>% 
  
  #2nd filtering) Removing Animal/Lactation with wrong enter date and problem
  # with production data
  filter(!(index %in% anm.lct.to.remove)) %>% 
  
  # combining with the corect data, but first removing unecessary variables
  select(-c(diff_birth_date, index)) %>% 
  rbind(keep.fixed_enter_date)
  


# Looking at possible problems between left herd date and lactation_start_date

d.v2k4 %>% 
  mutate(diff_lact_start = as.numeric(left_herd_date - lact_start_date)) %>% 
  pull(diff_lact_start) %>% 
  summary()

error_lact_left_dates <- d.v2k4 %>% 
  mutate(diff_lact_start = as.numeric(left_herd_date - lact_start_date)) %>% 
  filter(diff_lact_start < 0) %>% 
  distinct(anm_id) %>% 
  pull()




missing.prod.profit <- d.v2k4 %>% 
  filter(is.na(lact_no) == FALSE) %>% 
  select(anm_id, "tot_lact_date_yld_milk", "tot_lact_date_yld_fat", 
         "tot_lact_date_yld_prot", "cumul_milk_value") %>% 
  mutate(n_missing = rowSums(is.na(.))) %>% 
  filter(n_missing != 0) %>% 
  distinct(anm_id) %>% 
  pull(anm_id)




# There are 3 issues happening.

# 1) Most problematic animals are those that have a lact_start_date for a lot 
# of lactations (usually up to five), even though there is no left_herd_date
# neither prod nor profit info for those lactation. 
# These animals (n = 59) will be removed because it would be unreasonable to 
# assume the extraction date as the censoring date as they do not have prod nor
# profit data available


# 2) Some animals were associated with lact_no == 1, even though they were culled 
# before calving for the first time. Replacing that lact_no and lactation_start_date
# for NA

# 3) Some animals continued to have lactation records even though they were already
# culled.


remove_anms <- d.v2k4 %>% 
  filter(anm_id %in% missing.prod.profit) %>% 
  filter(is.na(left_herd_date) == TRUE) %>% 
  distinct(anm_id) %>% 
  pull(anm_id)



d.v2k5 <- d.v2k4 %>% 
  
  # Fixing issue 1
  filter(!(anm_id %in% remove_anms)) %>% 
  
  # Fixing issue 2
  mutate(diff_lact_left = as.numeric(left_herd_date - lact_start_date)) %>% 
  mutate(lact_no = ifelse(lact_no == 1 & diff_lact_left < 0,
                          NA, lact_no),
         lact_start_date = as.character(lact_start_date)) %>% 
  mutate(lact_start_date = as.Date(ifelse(is.na(lact_no), NA, lact_start_date))) %>% 
  
  # Fixing issue 3
  filter(diff_lact_left >= 0 | is.na(diff_lact_left))


# Problem fixed!!



# Calculating age at first calving (afc), length of life (LL), and length of
# productive life (LPL)

afc <- d.v2k5 %>%
  filter(lact_no == 1) %>%
  mutate(afc = as.numeric(lact_start_date - birth_date)) %>%

  # There is no duplicated observations, so getting only anm_id and afc to merge
  # with main data file
  select(anm_id, lact_start_date, afc) %>%

  # Need start date of first lactation to calculate length of productive life
  rename("date_1st_cv" = "lact_start_date")



d.v2k6 <- d.v2k5 %>% 
  
  left_join(afc,
            by = "anm_id") %>% 
  
  mutate(lpl = ifelse(is.na(left_herd_date) == FALSE,
                      as.numeric(left_herd_date - date_1st_cv),
                      NA), # as.numeric(extract_date - date_1st_cv)),
         
         ll = ifelse(is.na(left_herd_date) == FALSE,
                     as.numeric(left_herd_date - birth_date),
                     NA), # as.numeric(extract_date - birth_date))
         
         # Calculating variable indicating that animals were culled before 1st 
         # calving
         culled_bf_1st_cv = factor(ifelse(is.na(lact_no) == TRUE, "yes", "no"), 
                                  levels = c("yes", "no")))
           
           
d.v2k6 %>% 
  mutate(afc = (afc/365.25)*12,
         lpl = lpl/365.25,
         ll = ll/365.25) %>% 
  select(afc, lpl, ll) %>% 
  summary()



ggplot(d.v2k6 %>% 
         mutate(afc = (afc/365.25)*12,
                lpl = lpl/365.25,
                ll = ll/365.25), 
       aes(afc)) +
  geom_histogram() +
  ggtitle("Age at 1st calving (month)")


ggplot(d.v2k6 %>% 
         mutate(afc = (afc/365.25)*12,
                lpl = lpl/365.25,
                ll = ll/365.25), 
       aes(lpl)) +
  geom_histogram() +
  ggtitle("Lenght of life (year)")


ggplot(d.v2k6 %>% 
         mutate(afc = (afc/365.25)*12,
                lpl = lpl/365.25,
                ll = ll/365.25), 
       aes(ll)) +
  geom_histogram() +
  ggtitle("Lenght of productive life (year)")


DataExplorer::plot_missing(d.v2k6)



# Calculating life cumulative production and profit
# Milk, fat, and protein were already extracted as cumulative, but not MILK VALUE!!!!


d.v2k6 %>% 
  filter(culled_bf_1st_cv == "no")  %>% 
  mutate(diff_lact_left = as.numeric(left_herd_date - lact_start_date)) %>% 
  filter(is.na(tot_lact_date_yld_milk)) %>% 
  pull(diff_lact_left) %>% 
  summary()


d.v2k6 %>% 
  filter(culled_bf_1st_cv == "no", is.na(tot_lact_date_yld_milk))  %>% 
  mutate(diff_lact_left = as.numeric(left_herd_date - lact_start_date)) %>% 
  count()


# Issue 1: Some animals (37/372 = 9.95%) were culled before having at least one 
# test day (Median = 12 DIM in the lactation). Because of that, they do not have 
# production and profit data even though they have a lactation record. 
# For those animals, cumulative prod and profit will be based on data available.


# Issue 2: There are 2 animals (anm_id = 10095203 and 9985357) with missing milk
# value even though they have data on production. For those, I will be 
# calculating milk value based on the equation and coefficients provided by Lactanet.


anm_9985357_lact_4_milk_value <- d.v2k6 %>% 
  select(anm_id, lact_no, tot_lact_date_yld_milk, tot_lact_date_yld_fat, 
         tot_lact_date_yld_prot) %>% 
  filter(anm_id == 9985357) %>% 
  arrange(lact_no) %>% 
  mutate(lag_milk = lag(tot_lact_date_yld_milk),
         lag_fat = lag(tot_lact_date_yld_fat),
         lag_protein = lag(tot_lact_date_yld_prot)) %>% 
  filter(lact_no == 4) %>% 
  mutate(milk = tot_lact_date_yld_milk - lag_milk,
         fat = tot_lact_date_yld_fat - lag_fat,
         protein = tot_lact_date_yld_prot - lag_protein,
         cumul_milk_value = (milk * 1.53 * 0.0578) +  
           (fat * 10.7974) +  (protein * 7.2336)) %>% 
  pull(cumul_milk_value)


anm_10095203_lact_5_milk_value <- d.v2k6 %>% 
  select(anm_id, lact_no, tot_lact_date_yld_milk, tot_lact_date_yld_fat, 
         tot_lact_date_yld_prot) %>% 
  filter(anm_id == 10095203) %>% 
  arrange(lact_no) %>% 
  mutate(lag_milk = lag(tot_lact_date_yld_milk),
         lag_fat = lag(tot_lact_date_yld_fat),
         lag_protein = lag(tot_lact_date_yld_prot)) %>% 
  filter(lact_no == 5) %>% 
  mutate(milk = tot_lact_date_yld_milk - lag_milk,
         fat = tot_lact_date_yld_fat - lag_fat,
         protein = tot_lact_date_yld_prot - lag_protein,
         cumul_milk_value = (milk * 1.0006 * 0.0578) +  
           (fat * 10.6316) +  (protein * 8.5458)) %>% 
  pull(cumul_milk_value)




# Calculating cumulative lifetime milk value
cum_milk_value <- d.v2k6 %>% 
  
  # Some milk_value are zero because there is no data on production
  # Replacing the zeros for NA
  mutate(cumul_milk_value = na_if(cumul_milk_value, 0)) %>%
  
  
  # Fixing missing milk values with known production
  mutate(cumul_milk_value = ifelse(anm_id ==  9985357 & lact_no == 4,
                                   anm_9985357_lact_4_milk_value, 
                                   ifelse(anm_id ==  10095203 & lact_no == 5,
                                          anm_10095203_lact_5_milk_value,
                                          cumul_milk_value))) %>% 
  
  # Filtering out animals that were culled before 1st lactation and have no
  # milk value data because they were culled before a test day
  filter(culled_bf_1st_cv == "no" & is.na(cumul_milk_value) == FALSE) %>% 
  
  
  # Calculating lifetime cumulative milk value
  group_by(anm_id) %>% 
  summarise_at("cumul_milk_value",
               sum) %>% 
  ungroup() %>% 
  rename(life_cum_milk_value = cumul_milk_value)



ggplot(cum_milk_value, 
       aes(life_cum_milk_value)) +
  geom_histogram() +
  ggtitle("Lifetime cumulative milk value (CAD)")





ggplot(cum_milk_value %>% 
         left_join(d.v2k6 %>% 
                     select(anm_id, lpl) %>% 
                     distinct(anm_id, .keep_all = TRUE),
                   by = "anm_id"), 
       aes(y = life_cum_milk_value,
           x = lpl)) +
  geom_point() +
  ggtitle("Cumulative milk value (CAD) vs LPL")



# Getting lifetime cumulative milk, fat, and protein production

cum_prod <- d.v2k6 %>% 
  
  # Filtering out animals that do not have production because 1) they were culled
  # before stating the first lactation or 2) they were culled before having a test
  # day in a new lactation
  
  filter(culled_bf_1st_cv == "no" & is.na(tot_lact_date_yld_milk) == FALSE) %>% 
  
  # Since prod variables were already extracted as lifetime cumulative, just 
  # getting the last data row of each lactation will already give lifetime 
  # cumulative values
  group_by(anm_id) %>%
  arrange(desc(lact_no), .by_group = TRUE) %>% 
  filter(row_number() == 1) %>% 
  ungroup() %>% 
  
  # Calculating energy-corrected milk (ECM)
  mutate(life_cum_ecm = 12.55*tot_lact_date_yld_fat + 
           7.39*tot_lact_date_yld_prot + 
           0.2595*tot_lact_date_yld_milk) %>% 
  select(anm_id, "tot_lact_date_yld_milk", "tot_lact_date_yld_fat", 
         "tot_lact_date_yld_prot", life_cum_ecm) %>% 
  
  # Renaming variables to a be more meaningful
  rename("life_cum_milk" = "tot_lact_date_yld_milk", 
         "life_cum_fat" = "tot_lact_date_yld_fat",
         "life_cum_prot" = "tot_lact_date_yld_prot")
  


# Merging IDs, Longevity, prod and profit data into one single file
d.v2k7 <- d.v2k6 %>% 
  select(hrd_id, anm_id, calf_ear_tag, visible_id_no, reg_id,
         birth_date, left_herd_date, left_herd_reason,
         culled_bf_1st_cv, afc, lpl, ll) %>% 
  
  # Keeping only one record per animal since originally there was one record 
  # per lactation
  distinct() %>% 
  
  # Merging production data
  left_join(cum_prod,
            by = "anm_id") %>%
  
  # Merging profit data
  left_join(cum_milk_value,
            by = "anm_id") %>% 
  
  # Dropping unused levels
  droplevels()
  


# There is one cow with duplicated records. It happenned because her (anm_id = 10034876)  
# ear_tag ID is wrong (it should be 2717). Fixing that!

d.v2k8 <- d.v2k7 %>% 
  filter(!(anm_id == "10034876" & calf_ear_tag != 2717)) %>% 
  
  # Dropping potential unassigned factor levels
  droplevels()


str(d.v2k8)
DataExplorer::plot_missing(d.v2k8,
                           title = "All data - Including animals culled before 1st calving")
DataExplorer::plot_missing(d.v2k8%>% 
                             filter(culled_bf_1st_cv == "no"),
                           title = "EXCLUDED Animals culled before 1st calving")

DataExplorer::plot_histogram(d.v2k8)
DataExplorer::plot_correlation(d.v2k8, type = "continuous", 
                               cor_args = c(use = "pairwise.complete.obs"))



# Early life outcomes data ---------------------------------------------------------------


# Renaming variables on to match names on Lactanet file
d.upei1 <- d.upei %>% 
  left_join(lacid, by = "FarmID") %>%
  rename(hrd_id = LactanetID,
         calf_ear_tag = CalfID,
         reg_id = HO_N) %>% 
  mutate(hrd_id = as.factor(hrd_id),
         calf_ear_tag = as.factor(calf_ear_tag),
         reg_id = as.factor(reg_id)) %>% 
  
  # There are some empty cells, converting those to NA
  mutate(reg_id = na_if(reg_id, ""))


# Merging Lactanet and UPEI files
# Most animals have official Holstein registry (HO) IDS on Lactanet file. However, 
# 45 (12%) of them do not have it. For those who have HO ids, using that and hrd_id,
# for the merge. Using ear tag and hrd_id for the remaining animals.


wd1 <- d.v2k8 %>% 
  
  # Creating merging ID
  mutate(merge_id = ifelse(is.na(reg_id) == FALSE,
                           paste(hrd_id, reg_id, sep = "_"),
                           paste(hrd_id, calf_ear_tag, sep = "_"))) %>% 
  left_join(d.upei1 %>% 
              mutate(merge_id = ifelse(is.na(reg_id) == FALSE,
                                       paste(hrd_id, reg_id, sep = "_"),
                                       paste(hrd_id, calf_ear_tag, sep = "_"))) %>% 
              select(-c(hrd_id, reg_id, calf_ear_tag,
                        
                        # Also removing birth date variable, because it is already
                        # in the Lactanet file
                        BirthDate, birth_dt)), 
            by = "merge_id")


# There are some duplicated observations. Identifying these animals!

# wd1 %>% 
#   filter(merge_id %in% c(wd1 %>% 
#                            filter(duplicated(merge_id)) %>% 
#                            pull(merge_id))) %>% 
#   View()


# Most of data on these 7 animals are the same in the duplicated observations,
# but not in all of them. The difference is mostly on the serum IgG variable
# 1) Removing all of them since it is impossible to tell which one is correct.



wd2 <- wd1 %>% 
  
  # 1) Removing duplicates
  filter(!merge_id %in% c(wd1 %>% 
                             filter(duplicated(merge_id)) %>% 
                             pull(merge_id))) %>% 
  
  # 2) Variable selection based on study objective
  select(c(hrd_id, FarmID, anm_id, calf_ear_tag, reg_id,
           birth_date, left_herd_date, left_herd_reason, culled_bf_1st_cv, 
           afc, ll, lpl, life_cum_milk, life_cum_fat, life_cum_prot, life_cum_ecm,
           life_cum_milk_value,
           
           # Weight related variables
           birth_wt, wt2_dt, wt2, 
           wean_dt,
           
           # Health variables
           nav_inf, scours, pneumonia,
           
           # Serum IgG concentration and total serum protein
           IR, Ref_Optic,
           
           # Animal received antibiotic treatment
           Treatment)) %>% 
  
  # 3) changing names
  rename(igg = IR,
         protserum = Ref_Optic,
         antibiotic = Treatment) %>% 
  
  # Transforming categorical variables into factors
  mutate_at(c("FarmID", "nav_inf", "scours", "pneumonia", "antibiotic"),
            factor)


# Exploratory graphs

# Exploratory graphs
DataExplorer::plot_missing(wd2)

DataExplorer::plot_bar(wd2)
DataExplorer::plot_histogram(wd2)



## Weight variables ####

ggplot(wd2, aes(y = birth_wt, x = seq_along(birth_wt))) +
  geom_point() +
  ggtitle("Birth weight")

ggplot(wd2, aes(x = birth_wt)) +
  geom_histogram() +
  ggtitle("Birth weight")

# No indication of outliers on birth weight (i.e., values within biological levels)

ggplot(wd2, aes(y = wt2, x = seq_along(wt2))) +
  geom_point()

ggplot(wd2, aes(x = wt2)) +
  geom_histogram() +
  ggtitle("Birth weight")

# There are some high values for second weights, which supposedly happened
# close to the weaning date. Plotting second weight vs the animal age

ggplot(wd2, aes(y = wt2, x = wt2_dt - birth_date)) +
  geom_point()


# There is a mistake in one animal. Removing her from the plot
ggplot(wd2 %>% 
         mutate(age_2nd_weight = wt2_dt - birth_date) %>% 
         filter(age_2nd_weight > 0), 
       aes(y = wt2, x = age_2nd_weight)) +
  geom_point()

# No indication of outliers. All values seem to be withing biological limits.

# Checking the difference between the weaning date and date of the 2nd weight

wd2 %>% 
  mutate(diff_weight_date = as.numeric(wt2_dt - wean_dt)) %>% 
  pull(diff_weight_date) %>% 
  summary()

# wd2 %>% 
#   mutate(diff_weight_date = as.numeric(wt2_dt - wean_dt)) %>% 
#   View()


wd2 %>% 
  mutate(diff_weight_date = as.numeric(wt2_dt - wean_dt)) %>% 
  pull(diff_weight_date) %>% 
  hist()


# There is only one animal with second weighting one year after the weaning date.
# It is likely it was a typo since the weight is within what is expected. Fixing that.

wd3 <- wd2 %>% 
  mutate(diff_weight_date = as.numeric(wt2_dt - wean_dt)) %>% 
  mutate(wt2_dt = if_else(diff_weight_date == 365, 
                          wt2_dt-365, wt2_dt)) %>% 
  select(-diff_weight_date)



ggplot(wd3 %>% 
         mutate(diff_weight_date = as.numeric(wt2_dt - wean_dt)) %>%
         select(diff_weight_date),
       aes(diff_weight_date)) +
  geom_histogram(bins = 20, 
                 color = "white",
                 fill = "#4DAF4A") +
  labs(x = "Weaning date minus 2nd weight measurement (days)", 
       y = "Count") +
  scale_y_continuous(expand = expansion(mult = 0, add = c(0.9, 0.9))) +
  scale_x_continuous(expand = expansion(mult = 0, add = c(0.9, 0.9)))  +
  theme_classic(base_family = "Times New Roman") +
  theme(axis.text = element_text(size = 10, color = "black"),
        axis.line = element_line(color = "black"),
        axis.ticks = element_line(color = "black"))


# How many animals were weighted at weaning?
wd3 %>% 
  mutate(diff_weight_date = as.numeric(wt2_dt - wean_dt)) %>% 
  filter(diff_weight_date == 0) %>% 
  summarise(n = n())


round(wd3 %>% 
        mutate(diff_weight_date = as.numeric(wt2_dt - wean_dt)) %>% 
        filter(diff_weight_date == 0) %>% 
        summarise(n = n()) 
      / 
        wd3 %>%
        summarise(n = n()) * 100,
      1)

# It was the case for only very few animals (n = 64/365; 17.5%)


# For animals that were weighted a second time at weaning, keeping the 
# recorded value. For those that did not, using Dr. Cue's model for Holstein cows.



wd.weaning_weight <- wd3 %>%
  
  # Putting data in a long format to run the model
  select(anm_id, birth_date, birth_wt) %>% 
  
  # Bringing date from animals not culled yet
  
  mutate(ocasion = "birth",
         age = 0) %>% 
  rename(date = birth_date,
         weight = birth_wt) %>%
  
  rbind(wd3 %>%
          mutate(ocasion = "2nd weight",
                 age = day.to.yearORmonth(x = wt2_dt - birth_date,
                                          unit = "month")) %>% 
          select(anm_id, wt2_dt, wt2, ocasion, age) %>% 
          
          rename(date = wt2_dt,
                 weight = wt2)) %>% 
  
  arrange(anm_id, date) %>% 
  
  # Getting weaning age for prediction
  left_join(wd3 %>% 
              mutate(correct_weaning_wght = ifelse(wean_dt == wt2_dt,
                                                   "yes", 
                                                   ifelse(is.na(wean_dt) == TRUE |
                                                            is.na(wt2_dt) == TRUE,
                                                          NA, "no")),
                     age_weaning = day.to.yearORmonth(x = wean_dt - birth_date,
                                                      unit = "month")) %>% 
              select(anm_id, correct_weaning_wght, wean_dt, age_weaning),
            by = "anm_id") 
  

summary(wd.weaning_weight)





# here are two issues happening:
# 1) Not all animals were weighted twice
# 2) Date of second weight is earlier than birth_date

wd.weaning_weight1 <- wd.weaning_weight %>% 
  
  # Fixing issue 1
  filter(!(anm_id %in% c(wd.weaning_weight %>% 
                         filter_all(any_vars(is.na(.))) %>% 
                         distinct(anm_id) %>% 
                         pull(anm_id)))) %>% 
  
  # Fixing issue 2
  filter(!(anm_id %in% c(wd.weaning_weight %>% 
                           filter(age < 0) %>% 
                           distinct(anm_id) %>% 
                           pull(anm_id)))) %>% 
  
  droplevels()


# Using Dr. Cue's model only to predict animals that were not
# weighted at weaning
wd.weaning_weight_pred <- wd.weaning_weight1 %>%
  filter(correct_weaning_wght == "no") %>% 
  droplevels() %>% 
  group_by(anm_id) %>%
  arrange(age, .by_group = TRUE) %>%
  mutate(weaning_weight = cue.2012.HOLSTEIN(age = age, 
                                            weight = weight,
                                            a.holstein = a.holstein,
                                            g.inv.holstein = g.inv.holstein,
                                            age.pred = age_weaning)) %>% 
  ungroup() %>% 
  arrange(anm_id, desc(date)) %>% 
  select(anm_id, weaning_weight) %>% 
  distinct(anm_id, .keep_all = TRUE)



# Combining the final number with the raw data and removing repeated variables
# Also, calculating average daily gain during rearing (weaning_adg) and weaning age

wd.final_weaning_wght <- wd.weaning_weight1 %>% 
  filter(ocasion == "2nd weight" & correct_weaning_wght == "yes") %>% 
  select(anm_id, weight) %>% 
  rename(weaning_weight = weight) %>% 
  rbind(wd.weaning_weight_pred)

summary(wd.final_weaning_wght)



wd4 <- wd3 %>% 
  left_join(wd.final_weaning_wght, 
            by = "anm_id") %>% 
  mutate(weaning_adg = (weaning_weight - birth_wt)/ as.numeric(wean_dt - birth_date),
         weaning_age = ifelse(wean_dt - birth_date < 0, NA,
                              wean_dt - birth_date))  %>% 
  select(-c(wt2_dt, wt2, wean_dt))



ggplot(wd4, aes(weaning_age)) +
  geom_histogram() +
  ggtitle("Age at weaning (day)",
          subtitle = paste("Missing data = ", 
                           wd4 %>% 
                             summarise_at("weaning_age", ~sum(is.na(.x))) %>% 
                             pull(weaning_age), 
                           " animals (", 
                           round(wd4 %>% 
                                   summarise_at("weaning_age", ~sum(is.na(.x))) %>% 
                                   pull(weaning_age)
                                 /
                                   nrow(wd4)*100, 1),
                           "%)", sep = ""))


ggplot(wd4, aes(weaning_weight)) +
  geom_histogram() +
  ggtitle("Weight at weaning (kg)",
          subtitle = paste("Missing data = ", 
                           wd4 %>% 
                             summarise_at("weaning_weight", ~sum(is.na(.x))) %>% 
                             pull(weaning_weight), 
                           " animals (", 
                           round(wd4 %>% 
                                   summarise_at("weaning_weight", ~sum(is.na(.x))) %>% 
                                   pull(weaning_weight)
                                 /
                                   nrow(wd4)*100, 1),
                           "%)", sep = ""))


ggplot(wd4, aes(weaning_adg)) +
  geom_histogram() +
  ggtitle("Average daily gain during rearing (kg)",
          subtitle = paste("Missing data = ", 
                           wd4 %>% 
                             summarise_at("weaning_adg", ~sum(is.na(.x))) %>% 
                             pull(weaning_adg), 
                           " animals (", 
                           round(wd4 %>% 
                                   summarise_at("weaning_adg", ~sum(is.na(.x))) %>% 
                                   pull(weaning_adg)
                                 /
                                   nrow(wd4)*100, 1),
                           "%)", sep = ""))


mean(wd4$weaning_age, na.rm = T)
mean(wd4$weaning_weight, na.rm = T)



## Health events ####

wd4 %>% 
  select(nav_inf, scours, pneumonia, antibiotic) %>% 
  summary()

# Prevalence of health events is very low (as expected). There are a relative high
# number of NAs on Treatment variable, but it would be worth it keeping it for now.


## Lab measured variables ####
wd4 %>% 
  select(igg) %>% 
  summary()

ggplot(wd4, aes(igg)) +
  geom_histogram()

wd4 %>% 
  filter(!(igg < 0)) %>% 
  pull(igg) %>% 
  summary()


wd4 %>% 
  filter(igg < 0) %>% 
  nrow()


# There 12 animals with negative values for serum IgG concentration, which is
# wrong since it cannot be negative. Removing those animals. 
# Also, creating variables season and year of birth

# Lastly, adding the value zero for production and profit values for
# animals that were culled before calving for the first time.

wd5 <- wd4 %>% 
  mutate(birth_season = factor(getSeason(birth_date)),
         birth_year = factor(year(birth_date))) %>% 
  
  filter(igg >= 0|is.na(igg)) %>% 
  
  mutate_at(c("lpl", "life_cum_milk", "life_cum_fat", "life_cum_prot",
              "life_cum_ecm", "life_cum_milk_value"),
            ~ (ifelse(is.na(.) == TRUE, 0, .))) %>% 
  
  # Renaming some variables 
  rename(birth_weight = birth_wt,
         navel_inf = nav_inf,
         antib_treat = antibiotic,
         serum_IgG = igg,
         serum_total_prot = protserum) %>% 
  
  select(-c(afc, life_cum_milk, life_cum_fat, life_cum_prot, serum_total_prot)) %>% 
  mutate(ll = ll/365.25,
         lpl = lpl/365.25,
         weaning_age = (weaning_age/365.25)*12)



# Summaries for paper -----------------------------------------------------

# Missing data dispersion

DataExplorer::plot_missing(wd5)


n.NA <- wd5 %>%
  select(hrd_id, ll, lpl, life_cum_ecm, life_cum_milk_value, birth_weight, navel_inf,
         scours, pneumonia, serum_IgG, antib_treat, weaning_weight, weaning_adg,
         weaning_age, birth_season, birth_year) %>% 
  group_by(hrd_id) %>%
  summarise_all(~sum(is.na(.))) %>%
  transmute(hrd_id, sumNA = rowSums(.[-1]))

n.NON_NA <- wd5 %>%
  select(hrd_id, ll, lpl, life_cum_ecm, life_cum_milk_value, birth_weight, navel_inf,
         scours, pneumonia, serum_IgG, antib_treat, weaning_weight, weaning_adg,
         weaning_age, birth_season, birth_year) %>% 
  group_by(hrd_id) %>%
  summarise_all(~sum(!is.na(.))) %>%
  transmute(hrd_id, sumNON_NA = rowSums(.[-1]))

n.NA %>%
  left_join(n.NON_NA, by = "hrd_id") %>%
  mutate(percNA = round((sumNA/sumNON_NA)*100, 0)) %>%
  arrange(desc(percNA)) %>% 
  summarise(min = min(percNA),
            max = max(percNA),
            mean = mean(percNA),
            sd = sd(percNA))



# Numeric variables
wd5 %>% 
  select_if(is.numeric) %>%
  summarise_all(~sum(is.na(.))) %>% 
  data.frame()



wd5 %>% 
  summarise_if(is.numeric, mean, na.rm = T) %>% 
  data.frame() %>% 
  round(3)


wd5 %>% 
  summarise_if(is.numeric, sd, na.rm = T) %>% 
  data.frame() %>% 
  round(3)



wd5 %>% 
  summarise_if(is.numeric, min, na.rm = T) %>% 
  data.frame() %>% 
  round(3)

wd5 %>% 
  summarise_if(is.numeric, max, na.rm = T) %>% 
  data.frame() %>% 
  round(2)


# Qualitative variables


wd5 %>% 
  select(navel_inf, scours, pneumonia, antib_treat, birth_year, birth_season, hrd_id) %>% 
  select_if(is.factor) %>% 
  summarytools::freq()

# Analysing the data using BART!
# Length of life ----------------------------------------------------------


set.seed(1801)
set_bart_machine_num_cores(10)

set.seed(1801)
ll.bart <- bartMachineCV(X = wd5 %>%
                           select(birth_weight, weaning_weight, weaning_age, weaning_adg,
                                  navel_inf, scours, pneumonia, serum_IgG, antib_treat,  
                                  birth_season, birth_year, hrd_id) %>% 
                           as.data.frame(), 
                         y = wd5 %>% pull(ll),
                         
                         num_tree_cvs = c(50, 100, 200, 400), 
                         k_cvs = seq(from = 2, 
                                       to = 10, 
                                       by = 1), 
                         nu_q_cvs = list(c(2, 0.70),
                                         c(3, 0.70),
                                         c(4, 0.70),
                                         c(2, 0.80),
                                         c(3, 0.80),
                                         c(4, 0.80),
                                         c(2, 0.90),
                                         c(3, 0.90),
                                         c(4, 0.90)), 
                         k_folds = 5, 
                         use_missing_data = TRUE,
                         verbose = TRUE,
                         serialize = TRUE)


summary(ll.bart)

ll.bart$num_trees # 50
ll.bart$k # 2
ll.bart$nu # 4
ll.bart$q # 0.7


# Assessing the model


## Model convergence
# Look for a stationary process
plot_convergence_diagnostics(ll.bart)


# Looking at the errors assumptions, both normality and heteroskedasticity
check_bart_error_assumptions(ll.bart)



# Looking at the prediction and credible intervals
plot_y_vs_yhat(ll.bart, prediction_intervals = TRUE)
plot_y_vs_yhat(ll.bart, credible_intervals = TRUE)



 # Getting variable importance
 
 # Original error
rmse(pred = predict(ll.bart, wd5 %>%
                      select(birth_weight, weaning_weight, weaning_age, weaning_adg,
                             navel_inf, scours, pneumonia, serum_IgG, antib_treat,  
                             birth_season, birth_year, hrd_id)),
     obs = wd5$ll) %>% round(2)


runs <- 100

perct.res.ll <- data.frame(matrix(nrow = runs, ncol = 0))


for(j in c("birth_weight", "weaning_weight", "weaning_age", "weaning_adg",
           "navel_inf", "scours", "pneumonia", "serum_IgG", "antib_treat",  
           "birth_season", "birth_year", "hrd_id")){
  
  
  error.ll <- var.sig(model = ll.bart,
                      var.test = j,
                      var.target = wd5$ll,
                      data = wd5 %>%
                        select(birth_weight, weaning_weight, weaning_age, weaning_adg,
                               navel_inf, scours, pneumonia, serum_IgG, antib_treat,  
                               birth_season, birth_year, hrd_id),
                      runs = runs,
                      seed = 1801)
  
  perct.res.ll <- cbind(perct.res.ll,
                        data.frame(j = error.ll))
  colnames(perct.res.ll)[ncol(perct.res.ll)] <- j 
  
}



perct.res.ll %>% 
  select(birth_weight, weaning_weight, weaning_age, weaning_adg,
         serum_IgG, navel_inf, scours, pneumonia, antib_treat) %>% 
  summarise_all(mean) %>% 
  round(2)

perct.res.ll %>% 
  select(birth_weight, weaning_weight, weaning_age, weaning_adg,
         serum_IgG, navel_inf, scours, pneumonia, antib_treat) %>% 
  summarise_all(sd) %>% 
  round(2)



# calculating the ALE for the top three most important variables


yhat.ll  <- function(X.model, newdata) as.numeric(predict(X.model, newdata))


ale.ll.weaning_age <- ALEPlot1(X = wd5 %>%
                               select(birth_weight, weaning_weight, weaning_age, weaning_adg,
                                      navel_inf, scours, pneumonia, serum_IgG, antib_treat,  
                                      birth_season, birth_year, hrd_id) %>% 
                               as.data.frame(),
                             X.model = ll.bart,
                             pred.fun = yhat.ll,
                             
                             J = "weaning_age",
                             K = 100)


ale.ll.weaning_age$x.values[ale.ll.weaning_age$f.values == max(ale.ll.weaning_age$f.values)]



ale.ll.weaning_adg <- ALEPlot1(X = wd5 %>%
                               select(birth_weight, weaning_weight, weaning_age, weaning_adg,
                                      navel_inf, scours, pneumonia, serum_IgG, antib_treat,  
                                      birth_season, birth_year, hrd_id) %>% 
                               as.data.frame(),
                             X.model = ll.bart,
                             pred.fun = yhat.ll,
                             
                             J = "weaning_adg",
                             K = 100)


ale.ll.weaning_adg$x.values[ale.ll.weaning_adg$f.values == min(ale.ll.weaning_adg$f.values)]




ale.ll.birth_weight <- ALEPlot1(X = wd5 %>%
                                 select(birth_weight, weaning_weight, weaning_age, weaning_adg,
                                        navel_inf, scours, pneumonia, serum_IgG, antib_treat,  
                                        birth_season, birth_year, hrd_id) %>% 
                                 as.data.frame(),
                               X.model = ll.bart,
                               pred.fun = yhat.ll,
                               
                               J = "birth_weight",
                               K = 100)

ale.ll.birth_weight$x.values[ale.ll.birth_weight$f.values == max(ale.ll.birth_weight$f.values)]



text.size <- 8

ll.ALEs <- cowplot::plot_grid(

  ggplot() +
    geom_line(aes(y = ale.ll.weaning_age$f.values,
                  x = ale.ll.weaning_age$x.values),
              linewidth = 0.5,
              color = "#5CB85C") +
    
    theme_classic(base_family = "Times New Roman") + 
    scale_x_continuous(breaks = seq(1.4, 3.7, by = 0.5))+#,
                       # expand = expansion(mult = c(0.01, 0.01))) +
    scale_y_continuous(breaks = round(seq(min(ale.ll.weaning_age$f.values), 
                                          max(ale.ll.weaning_age$f.values), 
                                          by = (max(ale.ll.weaning_age$f.values) - min(ale.ll.weaning_age$f.values))/3), 2))+#,
                       # expand = expansion(mult = c(0.02, 0.01))) +
    labs(x = "Weaning age (month)",
         y = "ALE  LL (year)") +
    theme(axis.text = element_text(size = text.size, color = "black"),
          axis.ticks = element_line(color = "black"),
          axis.line = element_line("black"),
          axis.title.y = element_text(size = text.size,
                                      margin = margin(t = 0, # top
                                                      r = 5, # right
                                                      b = 0, # bottom
                                                      l = 0)),
          axis.title.x = element_text(size = text.size,
                                      margin = margin(t = 5, # top
                                                      r = 0, # right
                                                      b = 0, # bottom
                                                      l = 0))),
  
  ggplot() +
    geom_line(aes(y = ale.ll.weaning_adg$f.values,
                  x = ale.ll.weaning_adg$x.values),
              linewidth = 0.5,
              color = "#5CB85C") +
    
    theme_classic(base_family = "Times New Roman") + 
    scale_x_continuous(breaks = round(seq(0.50, 1, by = (1-0.5)/4), 2))+#,
                       # expand = expansion(mult = c(0.01, 0.01))) +
    scale_y_continuous(breaks = round(seq(-0.2, 0.2, by = abs(-0.2-0.2)/3),2)) +
    labs(x = "Weaning average daily gain (kg/day)",
         y = "ALE  LL (year)") +
    theme(axis.text = element_text(size = text.size, color = "black"),
          axis.ticks = element_line(color = "black"),
          axis.line = element_line("black"),
          axis.title.y = element_text(size = text.size,
                                      margin = margin(t = 0, # top
                                                      r = 5, # right
                                                      b = 0, # bottom
                                                      l = 0)),
          axis.title.x = element_text(size = text.size,
                                      margin = margin(t = 5, # top
                                                      r = 0, # right
                                                      b = 0, # bottom
                                                      l = 0))),
  
  ggplot() +
    geom_line(aes(y = ale.ll.birth_weight$f.values,
                  x = ale.ll.birth_weight$x.values),
              linewidth = 0.5,
              color = "#46B8DA") +
    
    theme_classic(base_family = "Times New Roman") + 
    scale_x_continuous(breaks = round(seq(30, 58, by = (58-30)/4), 2))+#,
                       # expand = expansion(mult = c(0.01, 0.01))) +
    scale_y_continuous(breaks = round(seq(-0.30, 0.10, by = abs((-0.30-0.10))/3), 2),
                      limits = c(-0.33, 0.10))+#,
                       # expand = expansion(mult = c(0.01, 0.01))) +
    labs(x = "Birth weight (kg)",
         y = "ALE  LL (year)") +
    theme(axis.text = element_text(size = text.size, color = "black"),
          axis.ticks = element_line(color = "black"),
          axis.line = element_line("black"),
          axis.title.y = element_text(size = text.size,
                                      margin = margin(t = 0, # top
                                                      r = 5, # right
                                                      b = 0, # bottom
                                                      l = 0)),
          axis.title.x = element_text(size = text.size,
                                      margin = margin(t = 5, # top
                                                      r = 0, # right
                                                      b = 0, # bottom
                                                      l = 0))),
  
  nrow = 1,
  labels = c("A", "B", "C"),
  label_fontfamily = "Times New Roman",
  label_size = 11.5)


ll.ALEs



# Length of productive life ----------------------------------------------------------

# Building the model using the default hyperparameters as they are generally good
# (Kapelner & Bleich, doi: )


set.seed(1801)
set_bart_machine_num_cores(10)

set.seed(1801)
lpl.bart <- bartMachineCV(X = wd5 %>%
                           select(birth_weight, weaning_weight, weaning_age, weaning_adg,
                                  navel_inf, scours, pneumonia, serum_IgG, antib_treat,  
                                  birth_season, birth_year, hrd_id) %>% 
                           as.data.frame(), 
                         y = wd5 %>% pull(lpl),
                         
                         num_tree_cvs = c(50, 100, 200, 400), 
                         k_cvs = seq(from = 2, 
                                     to = 10, 
                                     by = 1), 
                         nu_q_cvs = list(c(2, 0.70),
                                         c(3, 0.70),
                                         c(4, 0.70),
                                         c(2, 0.80),
                                         c(3, 0.80),
                                         c(4, 0.80),
                                         c(2, 0.90),
                                         c(3, 0.90),
                                         c(4, 0.90)), 
                         k_folds = 5, 
                         use_missing_data = TRUE,
                         verbose = TRUE,
                         serialize = TRUE)

summary(lpl.bart)

lpl.bart$num_trees # 50
lpl.bart$k # 2
lpl.bart$nu # 3
lpl.bart$q # 0.7

# Assessing the model

## Model convergence
# Look for a stationary process
plot_convergence_diagnostics(lpl.bart)


# Looking at the errors assumptions, both normality and heteroskedasticity
check_bart_error_assumptions(lpl.bart)



# Looking at the prediction and credible intervals
plot_y_vs_yhat(lpl.bart, prediction_intervals = TRUE)
plot_y_vs_yhat(lpl.bart, credible_intervals = TRUE)



 # Getting variable importance

# Original error
rmse(pred = predict(lpl.bart, wd5 %>%
                      select(birth_weight, weaning_weight, weaning_age, weaning_adg,
                             navel_inf, scours, pneumonia, serum_IgG, antib_treat,  
                             birth_season, birth_year, hrd_id)),
     obs = wd5$lpl) %>% round(2)

runs <- 100
perct.res.lpl <- data.frame(matrix(nrow = runs, ncol = 0))


for(j in c("birth_weight", "weaning_weight", "weaning_age", "weaning_adg",
           "navel_inf", "scours", "pneumonia", "serum_IgG", "antib_treat",  
           "birth_season", "birth_year", "hrd_id")){
  
  
  error.lpl <- var.sig(model = lpl.bart,
                      var.test = j,
                      var.target = wd5$lpl,
                      data = wd5 %>%
                        select(birth_weight, weaning_weight, weaning_age, weaning_adg,
                               navel_inf, scours, pneumonia, serum_IgG, antib_treat,  
                               birth_season, birth_year, hrd_id),
                      runs = runs,
                      seed = 1801)
  
  perct.res.lpl <- cbind(perct.res.lpl,
                        data.frame(j = error.lpl))
  colnames(perct.res.lpl)[ncol(perct.res.lpl)] <- j 
  
}


perct.res.lpl %>% 
  select(birth_weight, weaning_weight, weaning_age, weaning_adg,
         serum_IgG, navel_inf, scours, pneumonia, antib_treat) %>% 
  summarise_all(mean) %>% 
  round(2)

perct.res.lpl %>% 
  select(birth_weight, weaning_weight, weaning_age, weaning_adg,
         serum_IgG, navel_inf, scours, pneumonia, antib_treat) %>% 
  summarise_all(sd) %>% 
  round(2)


# calculating the ALE for the top three most important variables


yhat.lpl  <- function(X.model, newdata) as.numeric(predict(X.model, newdata))



ale.lpl.weaning_age <- ALEPlot1(X = wd5 %>%
                                 select(birth_weight, weaning_weight, weaning_age, weaning_adg,
                                        navel_inf, scours, pneumonia, serum_IgG, antib_treat,  
                                        birth_season, birth_year, hrd_id) %>% 
                                 as.data.frame(),
                               X.model = lpl.bart,
                               pred.fun = yhat.lpl,
                               
                               J = "weaning_age",
                               K = 100)

ale.lpl.weaning_age$x.values[ale.lpl.weaning_age$f.values == max(ale.lpl.weaning_age$f.values)]



ale.lpl.weaning_adg <- ALEPlot1(X = wd5 %>%
                                 select(birth_weight, weaning_weight, weaning_age, weaning_adg,
                                        navel_inf, scours, pneumonia, serum_IgG, antib_treat,  
                                        birth_season, birth_year, hrd_id) %>% 
                                 as.data.frame(),
                               X.model = lpl.bart,
                               pred.fun = yhat.lpl,
                               
                               J = "weaning_adg",
                               K = 100)


ale.lpl.weaning_adg$x.values[ale.lpl.weaning_adg$f.values == min(ale.lpl.weaning_adg$f.values)]


ale.lpl.birth_weight <- ALEPlot1(X = wd5 %>%
                                select(birth_weight, weaning_weight, weaning_age, weaning_adg,
                                       navel_inf, scours, pneumonia, serum_IgG, antib_treat,  
                                       birth_season, birth_year, hrd_id) %>% 
                                as.data.frame(),
                              X.model = lpl.bart,
                              pred.fun = yhat.lpl,
                              
                              J = "birth_weight",
                              K = 100)


ale.lpl.birth_weight$x.values[ale.lpl.birth_weight$f.values == min(ale.lpl.birth_weight$f.values)]


text.size <- 8


lpl.ALEs <- cowplot::plot_grid(
  
  ggplot() +
    geom_line(aes(y = ale.lpl.weaning_age$f.values,
                  x = ale.lpl.weaning_age$x.values),
              linewidth = 0.5,
              color = "#46B8DA") +
    
    theme_classic(base_family = "Times New Roman") + 
    scale_x_continuous(breaks = seq(1.4, 3.7, by = 0.5))+#,
                       # expand = expansion(mult = c(0.01, 0.01))) +
    scale_y_continuous(breaks = round(seq(min(ale.lpl.weaning_age$f.values), 
                                    max(ale.lpl.weaning_age$f.values), 
                                    by = (max(ale.lpl.weaning_age$f.values) - min(ale.lpl.weaning_age$f.values))/3), 2))+#,
                       # expand = expansion(mult = c(0.02, 0.01))) +
    labs(x = "Weaning age (month)",
         y = "ALE  LPL (year)") +
    theme(axis.text = element_text(size = text.size, color = "black"),
          axis.ticks = element_line(color = "black"),
          axis.line = element_line("black"),
          axis.title.y = element_text(size = text.size,
                                      margin = margin(t = 0, # top
                                                      r = 5, # right
                                                      b = 0, # bottom
                                                      l = 0)),
          axis.title.x = element_text(size = text.size,
                                      margin = margin(t = 5, # top
                                                      r = 0, # right
                                                      b = 0, # bottom
                                                      l = 0))),
  
  ggplot() +
    geom_line(aes(y = ale.lpl.weaning_adg$f.values,
                  x = ale.lpl.weaning_adg$x.values),
              linewidth = 0.5,
              color = "#46B8DA") +
    
    theme_classic(base_family = "Times New Roman") + 
    scale_x_continuous(breaks = round(seq(0.50, 1, by = (1-0.5)/4), 2))+#,
                       # expand = expansion(mult = c(0.01, 0.01))) +
    scale_y_continuous(breaks = c(-0.1, 0, 0.1, 0.2),
                       limits = c(-0.12, 0.2)) +
    labs(x = "Weaning average daily gain (kg/day)",
         y = "ALE  LPL (year)") +
    theme(axis.text = element_text(size = text.size, color = "black"),
          axis.ticks = element_line(color = "black"),
          axis.line = element_line("black"),
          axis.title.y = element_text(size = text.size,
                                      margin = margin(t = 0, # top
                                                      r = 5, # right
                                                      b = 0, # bottom
                                                      l = 0)),
          axis.title.x = element_text(size = text.size,
                                      margin = margin(t = 5, # top
                                                      r = 0, # right
                                                      b = 0, # bottom
                                                      l = 0))),
  
  ggplot() +
    geom_line(aes(y = ale.lpl.birth_weight$f.values,
                  x = ale.lpl.birth_weight$x.values),
              linewidth = 0.5,
              color = "#46B8DA") +
    
    theme_classic(base_family = "Times New Roman") + 
    scale_x_continuous(breaks = round(seq(30, 58, by = (58-30)/4), 2))+#,
                       # expand = expansion(mult = c(0.01, 0.01))) +
    scale_y_continuous(breaks = round(seq(-0.15, 0.10, by = abs((-0.15-0.10))/4), 2))+#,
                       # expand = expansion(mult = c(0.01, 0.01))) +
    labs(x = "Birth weight (kg)",
         y = "ALE  LPL (year)") +
    theme(axis.text = element_text(size = text.size, color = "black"),
          axis.ticks = element_line(color = "black"),
          axis.line = element_line("black"),
          axis.title.y = element_text(size = text.size,
                                      margin = margin(t = 0, # top
                                                      r = 5, # right
                                                      b = 0, # bottom
                                                      l = 0)),
          axis.title.x = element_text(size = text.size,
                                      margin = margin(t = 5, # top
                                                      r = 0, # right
                                                      b = 0, # bottom
                                                      l = 0))),
  
  nrow = 1,
  labels = c("D", "E", "F"),
  label_fontfamily = "Times New Roman",
  label_size = 11.5,
  label_y = 1.1)


lpl.ALEs

# Energy-corrected milk ----------------------------------------------------------

# Building the model using the default hyperparameters as they are generally good
# (Kapelner & Bleich, doi: )

set.seed(1801)
set_bart_machine_num_cores(10)

set.seed(1801)
ecm.bart <- bartMachineCV(X = wd5 %>%
                           select(birth_weight, weaning_weight, weaning_age, weaning_adg,
                                  navel_inf, scours, pneumonia, serum_IgG, antib_treat,  
                                  birth_season, birth_year, hrd_id) %>% 
                           as.data.frame(), 
                         y = wd5 %>% pull(life_cum_ecm),
                         
                         num_tree_cvs = c(50, 100, 200, 400), 
                         k_cvs = seq(from = 2, 
                                     to = 10, 
                                     by = 1), 
                         nu_q_cvs = list(c(2, 0.70),
                                         c(3, 0.70),
                                         c(4, 0.70),
                                         c(2, 0.80),
                                         c(3, 0.80),
                                         c(4, 0.80),
                                         c(2, 0.90),
                                         c(3, 0.90),
                                         c(4, 0.90)), 
                         k_folds = 5, 
                         use_missing_data = TRUE,
                         verbose = TRUE,
                         serialize = TRUE)

summary(ecm.bart)

ecm.bart$num_trees # 200
ecm.bart$k # 2
ecm.bart$nu # 3
ecm.bart$q # 0.8



# Assessing the model

## Model convergence
# Look for a stationary process
plot_convergence_diagnostics(ecm.bart)


# Looking at the errors assumptions, both normality and heteroskedasticity
check_bart_error_assumptions(ecm.bart)



# Looking at the prediction and credible intervals
plot_y_vs_yhat(ecm.bart, prediction_intervals = TRUE)
plot_y_vs_yhat(ecm.bart, credible_intervals = TRUE)




 # Getting variable importance

# Original error
rmse(pred = predict(ecm.bart, wd5 %>%
                      select(birth_weight, weaning_weight, weaning_age, weaning_adg,
                             navel_inf, scours, pneumonia, serum_IgG, antib_treat,  
                             birth_season, birth_year, hrd_id)),
     obs = wd5$life_cum_ecm) %>% round(2)

runs <- 100
perct.res.ecm <- data.frame(matrix(nrow = runs, ncol = 0))


for(j in c("birth_weight", "weaning_weight", "weaning_age", "weaning_adg",
           "navel_inf", "scours", "pneumonia", "serum_IgG", "antib_treat",  
           "birth_season", "birth_year", "hrd_id")){
  
  
  error.ecm <- var.sig(model = ecm.bart,
                       var.test = j,
                       var.target = wd5$life_cum_ecm,
                       data = wd5 %>%
                         select(birth_weight, weaning_weight, weaning_age, weaning_adg,
                                navel_inf, scours, pneumonia, serum_IgG, antib_treat,  
                                birth_season, birth_year, hrd_id),
                       runs = runs,
                       seed = 1801)
  
  perct.res.ecm <- cbind(perct.res.ecm,
                         data.frame(j = error.ecm))
  colnames(perct.res.ecm)[ncol(perct.res.ecm)] <- j 
  
}


perct.res.ecm %>% 
  select(birth_weight, weaning_weight, weaning_age, weaning_adg,
         serum_IgG, navel_inf, scours, pneumonia, antib_treat) %>% 
  summarise_all(mean) %>% 
  round(2)

perct.res.ecm %>% 
  select(birth_weight, weaning_weight, weaning_age, weaning_adg,
         serum_IgG, navel_inf, scours, pneumonia, antib_treat) %>% 
  summarise_all(sd) %>% 
  round(2)


# calculating the ALE for the top three most important variables

yhat.ecm  <- function(X.model, newdata) as.numeric(predict(X.model, newdata))



ale.ecm.serum_IgG <- ALEPlot1(X = wd5 %>%
                                  select(birth_weight, weaning_weight, weaning_age, weaning_adg,
                                         navel_inf, scours, pneumonia, serum_IgG, antib_treat,  
                                         birth_season, birth_year, hrd_id) %>% 
                                  as.data.frame(),
                                X.model = ecm.bart,
                                pred.fun = yhat.ecm,
                                
                                J = "serum_IgG",
                                K = 100)

ale.ecm.serum_IgG$x.values[ale.ecm.serum_IgG$f.values == max(ale.ecm.serum_IgG$f.values)]



ale.ecm.birth_weight <- ALEPlot1(X = wd5 %>%
                                   select(birth_weight, weaning_weight, weaning_age, weaning_adg,
                                          navel_inf, scours, pneumonia, serum_IgG, antib_treat,  
                                          birth_season, birth_year, hrd_id) %>% 
                                   as.data.frame(),
                                 X.model = ecm.bart,
                                 pred.fun = yhat.ecm,
                                 
                                 J = "birth_weight",
                                 K = 100)

ale.ecm.birth_weight$x.values[ale.ecm.birth_weight$f.values == max(ale.ecm.birth_weight$f.values)]

ale.ecm.weaning_adg <- ALEPlot1(X = wd5 %>%
                                  select(birth_weight, weaning_weight, weaning_age, weaning_adg,
                                         navel_inf, scours, pneumonia, serum_IgG, antib_treat,  
                                         birth_season, birth_year, hrd_id) %>% 
                                  as.data.frame(),
                                X.model = ecm.bart,
                                pred.fun = yhat.ecm,
                                
                                J = "weaning_adg",
                                K = 100)

ale.ecm.weaning_adg$x.values[ale.ecm.weaning_adg$f.values == min(ale.ecm.weaning_adg$f.values)]


text.size <- 8

ecm.ALEs <- cowplot::plot_grid(
  
  ggplot() +
    geom_line(aes(y = ale.ecm.serum_IgG$f.values,
                  x = ale.ecm.serum_IgG$x.values),
              linewidth = 0.5,
              color = "#EEA236") +
    
    theme_classic(base_family = "Times New Roman") + 
    scale_x_continuous(breaks = round(seq(0, 4800, by = abs(0-4800)/4),0)) +
    # scale_y_continuous(expand = expansion(mult = c(0, 0))) +
    labs(x = "Serum immunoglobulin G (mg/dL)",
         y = "ALE  ECM (kg)") +
    theme(axis.text = element_text(size = text.size, color = "black"),
          axis.ticks = element_line(color = "black"),
          axis.line = element_line("black"),
          axis.title.y = element_text(size = text.size,
                                      margin = margin(t = 0, # top
                                                      r = 5, # right
                                                      b = 0, # bottom
                                                      l = 0)),
          axis.title.x = element_text(size = text.size,
                                      margin = margin(t = 5, # top
                                                      r = 0, # right
                                                      b = 0, # bottom
                                                      l = 0))),
  
    ggplot() +
    geom_line(aes(y = ale.ecm.birth_weight$f.values,
                  x = ale.ecm.birth_weight$x.values),
              linewidth = 0.5,
              color = "#EEA236") +
    
    theme_classic(base_family = "Times New Roman") + 
    scale_x_continuous(breaks = round(seq(30, 58, by = (58-30)/4), 2))+#,
                       # expand = expansion(mult = c(0.01, 0.01))) +
    scale_y_continuous(breaks = round(seq(-2500, 1000, by = abs(-2500-1000)/3)))+#,
                       # expand = expansion(mult = c(0.01, 0.01))) +
    labs(x = "Birth weight (kg)",
         y = "ALE  ECM (kg)") +
    theme(axis.text = element_text(size = text.size, color = "black"),
          axis.ticks = element_line(color = "black"),
          axis.line = element_line("black"),
          axis.title.y = element_text(size = text.size,
                                      margin = margin(t = 0, # top
                                                      r = 5, # right
                                                      b = 0, # bottom
                                                      l = 0)),
          axis.title.x = element_text(size = text.size,
                                      margin = margin(t = 5, # top
                                                      r = 0, # right
                                                      b = 0, # bottom
                                                      l = 0))),
  
  ggplot() +
    geom_line(aes(y = ale.ecm.weaning_adg$f.values,
                  x = ale.ecm.weaning_adg$x.values),
              linewidth = 0.5,
              color = "#EEA236") +
    
    theme_classic(base_family = "Times New Roman") + 
    scale_x_continuous(breaks = round(seq(0.50, 1, by = (1-0.5)/4), 2)) +#,
                       # expand = expansion(mult = c(0.01, 0.01))) +
    scale_y_continuous(breaks = round(seq(-2000, 2000, by = abs(-2000-2000)/3))) +
    labs(x = "Weaning average daily gain (kg/day)",
         y = "ALE  ECM (kg)") +
    theme(axis.text = element_text(size = text.size, color = "black"),
          axis.ticks = element_line(color = "black"),
          axis.line = element_line("black"),
          axis.title.y = element_text(size = text.size,
                                      margin = margin(t = 0, # top
                                                      r = 5, # right
                                                      b = 0, # bottom
                                                      l = 0)),
          axis.title.x = element_text(size = text.size,
                                      margin = margin(t = 5, # top
                                                      r = 0, # right
                                                      b = 0, # bottom
                                                      l = 0))),
  
  nrow = 1,
  labels = c("G", "H", "I"),
  label_fontfamily = "Times New Roman",
  label_size = 11.5,
  label_y = 1.1)


ecm.ALEs




# Milk value ----------------------------------------------------------

# Building the model using the default hyperparameters as they are generally good
# (Kapelner & Bleich, doi: )

set.seed(1801)
set_bart_machine_num_cores(10)

set.seed(1801)
mv.bart <- bartMachineCV(X = wd5 %>%
                           select(birth_weight, weaning_weight, weaning_age, weaning_adg,
                                  navel_inf, scours, pneumonia, serum_IgG, antib_treat,  
                                  birth_season, birth_year, hrd_id) %>% 
                           as.data.frame(), 
                         y = wd5 %>% pull(life_cum_milk_value),
                         
                         num_tree_cvs = c(50, 100, 200, 400), 
                         k_cvs = seq(from = 2, 
                                     to = 10, 
                                     by = 1), 
                         nu_q_cvs = list(c(2, 0.70),
                                         c(3, 0.70),
                                         c(4, 0.70),
                                         c(2, 0.80),
                                         c(3, 0.80),
                                         c(4, 0.80),
                                         c(2, 0.90),
                                         c(3, 0.90),
                                         c(4, 0.90)), 
                         k_folds = 5, 
                         use_missing_data = TRUE,
                         verbose = TRUE,
                         serialize = TRUE)

summary(mv.bart)

mv.bart$num_trees # 100
mv.bart$k # 2
mv.bart$nu # 2
mv.bart$q # 0.9

# Assessing the model

## Model convergence
# Look for a stationary process
plot_convergence_diagnostics(mv.bart)


# Looking at the errors assumptions, both normality and heteroskedasticity
check_bart_error_assumptions(mv.bart)



# Looking at the prediction and credible intervals
plot_y_vs_yhat(mv.bart, prediction_intervals = TRUE)
plot_y_vs_yhat(mv.bart, credible_intervals = TRUE)




# Getting variable importance

# Original error
rmse(pred = predict(mv.bart, wd5 %>%
                      select(birth_weight, weaning_weight, weaning_age, weaning_adg,
                             navel_inf, scours, pneumonia, serum_IgG, antib_treat,  
                             birth_season, birth_year, hrd_id)),
     obs = wd5$life_cum_milk_value) %>% round(2)


runs <- 100
perct.res.mv <- data.frame(matrix(nrow = runs, ncol = 0))


for(j in c("birth_weight", "weaning_weight", "weaning_age", "weaning_adg",
           "navel_inf", "scours", "pneumonia", "serum_IgG", "antib_treat",  
           "birth_season", "birth_year", "hrd_id")){
  
  
  error.mv <- var.sig(model = mv.bart,
                       var.test = j,
                       var.target = wd5$life_cum_milk_value,
                       data = wd5 %>%
                         select(birth_weight, weaning_weight, weaning_age, weaning_adg,
                                navel_inf, scours, pneumonia, serum_IgG, antib_treat,  
                                birth_season, birth_year, hrd_id),
                       runs = runs,
                       seed = 1801)
  
  perct.res.mv <- cbind(perct.res.mv,
                         data.frame(j = error.mv))
  colnames(perct.res.mv)[ncol(perct.res.mv)] <- j 
  
}


perct.res.mv %>% 
  select(birth_weight, weaning_weight, weaning_age, weaning_adg,
         serum_IgG, navel_inf, scours, pneumonia, antib_treat) %>% 
  summarise_all(mean) %>% 
  round(2)

perct.res.mv %>% 
  select(birth_weight, weaning_weight, weaning_age, weaning_adg,
         serum_IgG, navel_inf, scours, pneumonia, antib_treat) %>% 
  summarise_all(sd) %>% 
  round(2)




# calculating the ALE for the top three most important variables


yhat.mv  <- function(X.model, newdata) as.numeric(predict(X.model, newdata))




ale.mv.serum_IgG <- ALEPlot1(X = wd5 %>%
                                select(birth_weight, weaning_weight, weaning_age, weaning_adg,
                                       navel_inf, scours, pneumonia, serum_IgG, antib_treat,  
                                       birth_season, birth_year, hrd_id) %>% 
                                as.data.frame(),
                              X.model = mv.bart,
                              pred.fun = yhat.mv,
                              
                              J = "serum_IgG",
                              K = 100)

ale.mv.serum_IgG$x.values[ale.mv.serum_IgG$f.values == max(ale.mv.serum_IgG$f.values)]



ale.mv.birth_weight <- ALEPlot1(X = wd5 %>%
                                   select(birth_weight, weaning_weight, weaning_age, weaning_adg,
                                          navel_inf, scours, pneumonia, serum_IgG, antib_treat,  
                                          birth_season, birth_year, hrd_id) %>% 
                                   as.data.frame(),
                                 X.model = mv.bart,
                                 pred.fun = yhat.mv,
                                 
                                 J = "birth_weight",
                                 K = 100)


ale.mv.birth_weight$x.values[ale.mv.birth_weight$f.values == max(ale.mv.birth_weight$f.values)]


ale.mv.weaning_age <- ALEPlot1(X = wd5 %>%
                                  select(birth_weight, weaning_weight, weaning_age, weaning_adg,
                                         navel_inf, scours, pneumonia, serum_IgG, antib_treat,  
                                         birth_season, birth_year, hrd_id) %>% 
                                  as.data.frame(),
                                X.model = mv.bart,
                                pred.fun = yhat.mv,
                                
                                J = "weaning_age",
                                K = 100)


ale.mv.weaning_age$x.values[ale.mv.weaning_age$f.values == max(ale.mv.weaning_age$f.values)]


text.size <- 8

mv.ALEs <- cowplot::plot_grid(
  
  ggplot() +
    geom_line(aes(y = ale.mv.serum_IgG$f.values,
                  x = ale.mv.serum_IgG$x.values),
              linewidth = 0.5,
              color = "#9632B8") +
    
    theme_classic(base_family = "Times New Roman") + 
    scale_x_continuous(breaks = round(seq(0, 4800, by = abs(0-4800)/4),0)) +
    scale_y_continuous(breaks = round(seq(-1000, 1500, by = abs(-1000-1500)/3),0)) +
    labs(x = "Serum immunoglobulin G (mg/dL)",
         y = "ALE milk value ($CAD)") +
    theme(axis.text = element_text(size = text.size, color = "black"),
          axis.ticks = element_line(color = "black"),
          axis.line = element_line("black"),
          axis.title.y = element_text(size = text.size,
                                      margin = margin(t = 0, # top
                                                      r = 5, # right
                                                      b = 0, # bottom
                                                      l = 0)),
          axis.title.x = element_text(size = text.size,
                                      margin = margin(t = 5, # top
                                                      r = 0, # right
                                                      b = 0, # bottom
                                                      l = 0))),
  
  ggplot() +
    geom_line(aes(y = ale.mv.weaning_age$f.values,
                  x = ale.mv.weaning_age$x.values),
              linewidth = 0.5,
              color = "#9632B8") +
    
    theme_classic(base_family = "Times New Roman") + 
    scale_x_continuous(breaks = seq(1.4, 3.7, by = 0.5))+#,
    # expand = expansion(mult = c(0.01, 0.01))) +
    scale_y_continuous(breaks = round(seq(-1200, 1000, by = abs(-1200-1000)/3),0)) +
    labs(x = "Weaning age (month)",
         y = "ALE milk value ($CAD)") +
    theme(axis.text = element_text(size = text.size, color = "black"),
          axis.ticks = element_line(color = "black"),
          axis.line = element_line("black"),
          axis.title.y = element_text(size = text.size,
                                      margin = margin(t = 0, # top
                                                      r = 5, # right
                                                      b = 0, # bottom
                                                      l = 0)),
          axis.title.x = element_text(size = text.size,
                                      margin = margin(t = 5, # top
                                                      r = 0, # right
                                                      b = 0, # bottom
                                                      l = 0))),
  
  ggplot() +
    geom_line(aes(y = ale.mv.birth_weight$f.values,
                  x = ale.mv.birth_weight$x.values),
              linewidth = 0.5,
              color = "#9632B8") +
    
    theme_classic(base_family = "Times New Roman") + 
    scale_x_continuous(breaks = round(seq(30, 58, by = (58-30)/4), 2))+#,
                       # expand = expansion(mult = c(0.01, 0.01))) +
    # scale_y_continuous(expand = expansion(mult = c(0, 0))) +
    labs(x = "Birth weight (kg)",
         y = "ALE milk value ($CAD)") +
    theme(axis.text = element_text(size = text.size, color = "black"),
          axis.ticks = element_line(color = "black"),
          axis.line = element_line("black"),
          axis.title.y = element_text(size = text.size,
                                      margin = margin(t = 0, # top
                                                      r = 5, # right
                                                      b = 0, # bottom
                                                      l = 0)),
          axis.title.x = element_text(size = text.size,
                                      margin = margin(t = 5, # top
                                                      r = 0, # right
                                                      b = 0, # bottom
                                                      l = 0))),
  
  nrow = 1,
  labels = c("J", "K", "L"),
  label_fontfamily = "Times New Roman",
  label_size = 11.5,
  label_y = 1.15)


mv.ALEs





cowplot::plot_grid(ll.ALEs,
                   lpl.ALEs,
                   ecm.ALEs,
                   mv.ALEs,
                   
                   nrow = 4)


ggsave(cowplot::plot_grid(ll.ALEs,
                          lpl.ALEs,
                          ecm.ALEs,
                          mv.ALEs,
                          
                          nrow = 4),
       
       paste(Sys.Date(), "ALE.jpeg", sep = "_"),
       dpi = 750,
       units = "cm",
       width = 23,
       height = 14,
       bg = "white")
       
       
       
       
